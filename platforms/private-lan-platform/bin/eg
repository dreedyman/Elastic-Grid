#!/bin/bash

# Elastic Grid
# Copyright (C) 2008-2009 Elastic Grid, LLC.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This script provides the command and control utility for starting
# Elastic Grid services and the Elastic Grid command line interface.

# This script also sets the
# environment to download native libraries from the $EG_HOME/lib/native directory.

# Execute the platform setup shell script if available
if [ -e "$EG_HOME/bin/setup-env" ] ; then
    . $EG_HOME/bin/setup-env
    #echo "Elastic Grid options: $EG_OPTS"
fi

scriptDir="$(dirname $0)"
scriptName=`basename "$0"`
scriptPath="$scriptDir/$scriptName"
command_line=$*
start=

if [ "$1" = "start" ]; then
    start=1
    shift
    command_line=$*
fi

# Set local variables
if [ -z "$EG_HOME" ] ; then
  EG_HOME="$scriptDir/.."
fi

# Convert to absolute path
EG_HOME=$(cd "$EG_HOME" && pwd)
EG_LIB=$EG_HOME/lib

# Check JINI_HOME
if [ -z "$JINI_HOME" ] ; then
    if [ -e "$EG_HOME/lib/apache-river" ] ; then
        JINI_HOME=$EG_HOME/lib/apache-river
    else
        echo "Cannot locate expected Jini (River) distribution, either set JINI_HOME or download Elastic Grid with dependencies, exiting"
	    exit 1
    fi
fi
JINI_LIB=$JINI_HOME/lib

# Check for JAVA_HOME
if [ -z "$JAVA_HOME" ] ; then
    JAVACMD=java
else
    JAVACMD="$JAVA_HOME/bin/java"
fi

# Function to find a file
getStarterConfig() {
    service="$1"
    if [ -f "$EG_HOME/config/start-$service.groovy" ] ; then
	   starterConfig="$EG_HOME/config/start-$service.groovy"
    else
	    echo "Cannot locate expected service starter file [start-$service.groovy] in [$EG_HOME/config], exiting"
	    exit 1
    fi
}

cygwin=
case $OS in
    Windows*)
        cygwin=1
esac

# Check to see if path conversion is needed
toNative() {
    # Check for Cygwin
    case $OS in
        Windows*)
           toWindows "$@";;
           *) echo $* ;;
    esac
}

# Cygwin utility to convert path if running under windows
toWindows() {
    cygpath -pw "$@"
}

if [ -e "/var/log/eg" ] ; then
    LOG_DIR=/var/log/eg
else
    LOG_DIR=$EG_HOME/logs
fi


#DEBUG=-Dorg.rioproject.tools.webster.debug
if [ -z "$NET_ADDR" ] ; then
    NETWORK="-Djava.rmi.server.hostname="`hostname`
else
  NETWORK="-Djava.rmi.server.hostname="$NET_ADDR
fi
#echo $NETWORK

if [ -z "$JAVA_MEM_OPTIONS" ] ; then
    JAVA_MEM_OPTIONS="-Xms256m -Xmx256m"
fi

# If the command is to start the Elastic Grid services, invoke the ServiceStarter
# Otherwise invoke the CLI
if [ "$start" = "1" ]; then
    EG_NATIVE_DIR="$(toNative $EG_LIB/native)"
    # Check for running on OS/X
    opSys=`uname -s`
    if [ $opSys = "Darwin" ] ; then
        export DYLD_LIBRARY_PATH=$EG_NATIVE_DIR:$DYLD_LIBRARY_PATH
        libpath="-Djava.library.path=$DYLD_LIBRARY_PATH"
    else
        if [ "$cygwin" = "1" ] ; then
            libpath="-Djava.library.path=$EG_NATIVE_DIR"
        else
            export LD_LIBRARY_PATH=$EG_NATIVE_DIR:$LD_LIBRARY_PATH
            libpath="-Djava.library.path=$EG_NATIVE_DIR"
        fi
    fi

    classpath="-cp $(toNative $EG_LIB/boot.jar:$JINI_LIB/start.jar:$JAVA_HOME/lib/tools.jar:$EG_LIB/groovy/groovy-all-1.6.0.jar:$EG_LIB/elastic-grid/elastic-grid-core-${pom.version}.jar:$EG_LIB/elastic-grid/elastic-grid-utils-${pom.version}.jar:$EG_LIB/elastic-grid/jets3t-0.7.1.jar:$EG_LIB/elastic-grid/jul-to-slf4j-1.5.6.jar:$EG_LIB/elastic-grid/slf4j-api-1.5.6.jar:$EG_LIB/elastic-grid/slf4j-log4j12-1.5.6.jar:$EG_LIB/elastic-grid/log4j-1.2.14.jar:$EG_LIB/elastic-grid/commons-logging-1.1.1.jar:$EG_LIB/elastic-grid/commons-httpclient-3.1.jar:$EG_LIB/elastic-grid/commons-codec-1.3.jar)"
    agentpath="-javaagent:$(toNative $EG_LIB/boot.jar)"
    launchTarget=com.sun.jini.start.ServiceStarter
    if [ -z "$1" ] ; then
        echo "A service to start is required, exiting"
        exit 1
    else
        starter_arg=$1
        getStarterConfig $1
        echo "starter config [$starterConfig]"
        shift
        command_line=$*
    fi
    ARGS="$starter_arg $command_line"
    ""$JAVACMD"" -server $JAVA_MEM_OPTIONS $classpath $agentpath $EG_OPTS $libpath  \
        -Djava.security.policy=$EG_HOME/policy/policy.all \
        -Djava.protocol.handler.pkgs=com.elasticgrid.aws \
        -DRIO_HOME=$EG_HOME \
        -DEG_HOME=$EG_HOME \
        -Dorg.rioproject.home=$EG_HOME \
        -DRIO_NATIVE_DIR=$EG_NATIVE_DIR \
        -DJINI_HOME=$JINI_HOME \
        -DRIO_LOG_DIR=$EG_HOME/logs/ \
        -Drio.script.path="$scriptPath" \
        -Drio.script.args="$ARGS" \
        $NETWORK $DEBUG $launchTarget $starterConfig $command_line 2>&1 > $LOG_DIR/eg-$starter_arg.log
else
    # Set system properties
    cliExt="$EG_HOME/config/cli.groovy"
    launchTarget=com.elasticgrid.tools.cli.CLI
    for j in $(find $EG_HOME/lib/elastic-grid -name "*.jar")
    do
        CP=$CP:$j
    done
    classpath="$(toNative $CP:$EG_LIB/rio-cli.jar:$EG_LIB/rio.jar:$JINI_LIB/jsk-lib.jar:$JINI_LIB/jsk-platform.jar:$EG_LIB/spring/spring.jar:$EG_LIB/jakarta-commons/commons-logging.jar:$EG_LIB/groovy/groovy-all-1.6.0.jar)"
    "$JAVACMD" -cp $classpath $JAVA_MEM_OPTIONS $EG_OPTS \
        -Djava.security.policy=$EG_HOME/policy/policy.all \
        -Djava.protocol.handler.pkgs=com.elasticgrid.aws \
        -DRIO_HOME=$EG_HOME \
        -DEG_HOME=$EG_HOME \
        -Dorg.rioproject.home=$EG_HOME \
        -DJINI_HOME=$JINI_HOME \
        -Djava.util.logging.config.file=$EG_HOME/config/eg-cli.logging.properties \
        $NETWORK $DEBUG $launchTarget $cliExt $command_line
fi

