 ------
 Usage
 ------
 Jerome Bernard
 ------
 20 February 2007
 ------

~~ Copyright 2007 The Apache Software Foundation.
~~
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~
~~      http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.

~~ NOTE: For help with the syntax of this file, see:
~~ http://maven.apache.org/guides/mini/guide-apt-format.html

Usage

* Building a JSB

 When the packaging of your project is <<<jsb>>> instead of <<<jar>>>, this
 plugins alter the normal Maven build process by creating two or three artifacts
 instead of the usual one (the Jar of your code). For example:

+-----+
 <project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>org.jini.rio.examples</groupId>
    <artifactId>hello</artifactId>
    <version>1.0</version>
    <packaging>jsb</packaging>
    <name>Hello World JSB</name>

    ...
 </project>
+-----+

 The plugin creates a Jar containing the implementation classes of your JSB,
 another one containing classes (suffixed by <<<-dl>>> which will be made
 available for codebase annotation (so the code of your proxy and all
 related classes). Finally if your JSB provides a Service UI, this plugin
 will create another Jar suffixed by <<<-ui>>>.

 After running <<<mvn install>>>, you will find in your <<<target>>> directory
 all the Jars produced by this plugin. Your Jars will have the same <<<groupId>>>
 and <<<artifactId>>>, only the <<<classifier>>> setting will differ.

 So for example if you have a JSB called A using another JSB called B, you need
 to specify that A has a dependency to B. The dependency is not on the
 implementation Jar of B, but the downloadable code of B. In order to specify
 this setting, simply do the following:
 
+-----+
 <dependency>
   <groupId>your.groupId</groupId>
   <artifactId>your.artifactId</artifactId>
   <version>your-version</version>
   <classifier>dl</classifier>
 </dependency>
+-----+


* Deploying an OpString

 An OpString is usually made of one or many JSB. This plugin do not automate
 the creation of the OpString file *yet*, but can help you deploying your
 OpString into Rio.

 In order to deploy your OpString, you need to:

  * copy all required dependencies into the <<<deploy>>> directory,

  * tell Rio that you want to deploy your OpString.


 The plugin creates a subdirectory of the <<<deploy>>> directory whose name
 is the one specified in <<<artifactId>>>. In this subdirectory, two (or
 three if your JSB provides a Service UI) directories are created:

  * <<<lib>>>: contains all Jars required for the implementation of the JSB,

  * <<<lib-dl>>>: contains all Jars required for codebase annotation,

  * <<<lib-ui>>>: contains all Jars required for Service UI.



 


